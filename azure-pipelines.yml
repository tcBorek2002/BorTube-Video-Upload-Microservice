trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '9017ddb3-29b8-485b-b9ef-9620b67fb7a3'
  imageRepository: 'bortubevideomicroservice'
  containerRegistry: 'bortubecontainers.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'bortubecontainers8edb-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Test
  displayName: Test code
  jobs:
    - job: Test_and_SonarQube
      displayName: Test code and run SonarQube analysis
      steps:
      - script: npm install
        displayName: 'Install packages'
      - script: npm test
        displayName: 'Run Tests and Generate Coverage'
      # - task: PublishPipelineArtifact@1
      #   inputs:
      #     targetPath: $(System.DefaultWorkingDirectory)/coverage
      #     artifact: 'coverage'
      #     publishLocation: 'pipeline'
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     buildType: 'specific'
        #     project: '$(System.TeamProjectId)'
        #     definition: '1'
        #     artifactName: 'coverage'
        #     targetPath: '$(System.DefaultWorkingDirectory)/coverage'
      - task: SonarQubePrepare@5
        inputs:
          SonarQube: 'SonarQube-Eindhoven'
          scannerMode: 'CLI'
          configMode: 'file' 
      - powershell: |
          $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'
          Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"
        displayName: Filter out SonarQube scanner params
      - task: SonarQubeAnalyze@5
        inputs:
          jdkversion: 'JAVA_HOME_17_X64'
      - task: SonarQubePublish@5
        inputs:
          pollingTimeoutSec: '300'

# - stage: Verify
#   displayName: Verify code
#   jobs:
    
            
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'tcBorek2002BorTubeVideoMicroservice.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
